/*
 * Copyright (c) 2009-2010 Tyrell Corporation.
 *
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific language governing rights and limitations
 * under the License.
 *
 * The Original Code is an implementation of the Metaverse eXchange Protocol.
 *
 * The Initial Developer of the Original Code is Akos Maroy.
 * All Rights Reserved.
 *
 * Contributor(s): Akos Maroy.
 *
 * Alternatively, the contents of this file may be used under the terms
 * of the Affero General Public License (the  "AGPL"), in which case the
 * provisions of the AGPL are applicable instead of those
 * above. If you wish to allow use of your version of this file only
 * under the terms of the AGPL and not to allow others to use
 * your version of this file under the MPL, indicate your decision by
 * deleting the provisions above and replace them with the notice and
 * other provisions required by the AGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file
 * under either the MPL or the AGPL.
 */
package mxp.iot;

import java.io.IOException;
import java.io.InputStream;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

import junit.framework.TestCase;
import mxp.message.Acknowledge;
import mxp.message.ActionEvent;
import mxp.message.AttachRequest;
import mxp.message.AttachResponse;
import mxp.message.ChallengeRequest;
import mxp.message.ChallengeResponse;
import mxp.message.DetachRequest;
import mxp.message.DetachResponse;
import mxp.message.DisappearanceEvent;
import mxp.message.EjectRequest;
import mxp.message.EjectResponse;
import mxp.message.ExamineRequest;
import mxp.message.ExamineResponse;
import mxp.message.HandoverEvent;
import mxp.message.HandoverRequest;
import mxp.message.HandoverResponse;
import mxp.message.InjectRequest;
import mxp.message.InjectResponse;
import mxp.message.InteractRequest;
import mxp.message.InteractResponse;
import mxp.message.JoinRequest;
import mxp.message.JoinResponse;
import mxp.message.Keepalive;
import mxp.message.LeaveRequest;
import mxp.message.LeaveResponse;
import mxp.message.ListBubblesRequest;
import mxp.message.ListBubblesResponse;
import mxp.message.Message;
import mxp.message.ModifyRequest;
import mxp.message.ModifyResponse;
import mxp.message.MovementEvent;
import mxp.message.PerceptionEvent;
import mxp.message.SynchronizationBeginEvent;
import mxp.message.SynchronizationEndEvent;
import mxp.message.Throttle;
import mxp.message.Message.Type;
import mxp.packet.MessageFrame;
import mxp.packet.Packet;
import mxp.packet.Packetizer;
import mxp.serialization.SerializationInputStream;

/**
 * Inter-operability package / message test.
 * Takes a reference zip file, that contains serialized packets in binary form,
 * and test if these are the same as the ones generated by the Java
 * implementation.
 *
 * @see <a href="http://iot.bubblecloud.org/">MXP IOT</a>
 * @see <a href="http://iot.bubblecloud.org/reference_messages.aspx">
 *      Reference Messages</a>
 */
public class IotTest extends TestCase {
    /**
     * The name of the zip file containing the reference packets.
     */
    private static final String REFERENCE_ZIP_FILE_NAME =
                                        "var/mxp_0_5_reference_messages.zip";

    /**
     * The timestamp that is used for all packets for testing.
     */
    private static final Date TIMESTAMP =
                    new GregorianCalendar(2009, 10, 5, 15, 33, 25).getTime();

    /**
     * Get a list of reference packets by its reference name.
     *
     * @param referenceName the name of the reference packets to get.
     * @return a list of preference packets. zero in length if the reference
     *         name is not valid.
     * @throws IOException on I/O errors
     */
    public static List<Packet> getReferencePackets(String referenceName)
                                                            throws IOException {
        ZipFile     zipFile = new ZipFile(REFERENCE_ZIP_FILE_NAME);
        ZipEntry    entry   = zipFile.getEntry(referenceName);
        assertNotNull(entry);

        int                         size   = (int) entry.getSize();
        InputStream                 zin    = zipFile.getInputStream(entry);
        SerializationInputStream    in     = new SerializationInputStream(zin);
        Packet                      packet = new Packet();

        packet.deserialize(in, size);

        Vector<Packet>    packets = new Vector<Packet>();
        packets.add(packet);

        return packets;
    }

    /**
     * Check the serialization of the acknowledge message.
     *
     * @throws IOException on I/O issues
     */
    public void testAcknowledge() throws IOException {
        List<Packet> packets = getReferencePackets("messages/acknowledge.dat");

        assertEquals(packets.size(), 1);

        assertEquals(packets.get(0).getSessionId(), 1);
        assertEquals(packets.get(0).getPacketId(), 1);
        assertEquals(packets.get(0).getFirstSendTime(), TIMESTAMP);
        assertEquals(packets.get(0).getGuaranteed(), 0);
        assertEquals(packets.get(0).getResendCount(), 0);

        List<Message>                       messages = new Vector<Message>();
        List<Integer>                       messageIds = new Vector<Integer>();
        Map<Integer, List<MessageFrame>>    frames =
                                    new HashMap<Integer, List<MessageFrame>>();

        Packetizer.packetsToMessages(packets, messages, messageIds, frames);

        assertEquals(frames.size(), 0);
        assertEquals(messages.size(), 1);
        assertEquals(messages.get(0).getType(), Type.ACKNOWLEDGE);
        assertEquals(messageIds.size(), 1);
        assertTrue(messageIds.get(0) == 1);

        Acknowledge ack = (Acknowledge) messages.get(0);

        assertEquals(ack, ReferenceMessage.generateAcknowledge());
    }

    /**
     * Check the serialization of the attach request message.
     *
     * @throws IOException on I/O issues
     */
    public void testAttachRequest() throws IOException {
        List<Packet> packets = getReferencePackets(
                                                "messages/attachrequest.dat");

        assertEquals(packets.size(), 1);

        assertEquals(packets.get(0).getSessionId(), 1);
        assertEquals(packets.get(0).getPacketId(), 1);
        assertEquals(packets.get(0).getFirstSendTime(), TIMESTAMP);
        assertEquals(packets.get(0).getGuaranteed(), 1);
        assertEquals(packets.get(0).getResendCount(), 0);

        List<Message>                       messages = new Vector<Message>();
        List<Integer>                       messageIds = new Vector<Integer>();
        Map<Integer, List<MessageFrame>>    frames =
                                    new HashMap<Integer, List<MessageFrame>>();

        Packetizer.packetsToMessages(packets, messages, messageIds, frames);

        assertEquals(frames.size(), 0);
        assertEquals(messages.size(), 1);
        assertEquals(messages.get(0).getType(), Type.ATTACH_REQUEST);
        assertEquals(messageIds.size(), 1);
        assertTrue(messageIds.get(0) == 1);

        AttachRequest ar = (AttachRequest) messages.get(0);

        assertEquals(ar, ReferenceMessage.generateAttachRequest());
    }

    /**
     * Check the serialization of the attach response message.
     *
     * @throws IOException on I/O issues
     */
    public void testAttachResponse() throws IOException {
        List<Packet> packets = getReferencePackets(
                                                "messages/attachresponse.dat");

        assertEquals(packets.size(), 1);

        assertEquals(packets.get(0).getSessionId(), 1);
        assertEquals(packets.get(0).getPacketId(), 1);
        assertEquals(packets.get(0).getFirstSendTime(), TIMESTAMP);
        assertEquals(packets.get(0).getGuaranteed(), 1);
        assertEquals(packets.get(0).getResendCount(), 0);

        List<Message>                       messages = new Vector<Message>();
        List<Integer>                       messageIds = new Vector<Integer>();
        Map<Integer, List<MessageFrame>>    frames =
                                    new HashMap<Integer, List<MessageFrame>>();

        Packetizer.packetsToMessages(packets, messages, messageIds, frames);

        assertEquals(frames.size(), 0);
        assertEquals(messages.size(), 1);
        assertEquals(messages.get(0).getType(), Type.ATTACH_RESPONSE);
        assertEquals(messageIds.size(), 1);
        assertTrue(messageIds.get(0) == 1);

        AttachResponse ar = (AttachResponse) messages.get(0);

        assertEquals(ar, ReferenceMessage.generateAttachResponse());
    }

    /**
     * Check the serialization of the challenge request message.
     *
     * @throws IOException on I/O issues
     */
    public void testChallengeRequest() throws IOException {
        List<Packet> packets = getReferencePackets(
                                              "messages/challengerequest.dat");

        assertEquals(packets.size(), 1);

        assertEquals(packets.get(0).getSessionId(), 1);
        assertEquals(packets.get(0).getPacketId(), 1);
        assertEquals(packets.get(0).getFirstSendTime(), TIMESTAMP);
        assertEquals(packets.get(0).getGuaranteed(), 1);
        assertEquals(packets.get(0).getResendCount(), 0);

        List<Message>                       messages = new Vector<Message>();
        List<Integer>                       messageIds = new Vector<Integer>();
        Map<Integer, List<MessageFrame>>    frames =
                                    new HashMap<Integer, List<MessageFrame>>();

        Packetizer.packetsToMessages(packets, messages, messageIds, frames);

        assertEquals(frames.size(), 0);
        assertEquals(messages.size(), 1);
        assertEquals(messages.get(0).getType(), Type.CHALLENGE_REQUEST);
        assertEquals(messageIds.size(), 1);
        assertTrue(messageIds.get(0) == 1);

        ChallengeRequest cr = (ChallengeRequest) messages.get(0);

        assertEquals(cr, ReferenceMessage.generateChallengeRequest());
    }

    /**
     * Check the serialization of the challenge response message.
     *
     * @throws IOException on I/O issues
     */
    public void testChallengeResponse() throws IOException {
        List<Packet> packets = getReferencePackets(
                                              "messages/challengeresponse.dat");

        assertEquals(packets.size(), 1);

        assertEquals(packets.get(0).getSessionId(), 1);
        assertEquals(packets.get(0).getPacketId(), 1);
        assertEquals(packets.get(0).getFirstSendTime(), TIMESTAMP);
        assertEquals(packets.get(0).getGuaranteed(), 1);
        assertEquals(packets.get(0).getResendCount(), 0);

        List<Message>                       messages = new Vector<Message>();
        List<Integer>                       messageIds = new Vector<Integer>();
        Map<Integer, List<MessageFrame>>    frames =
                                    new HashMap<Integer, List<MessageFrame>>();

        Packetizer.packetsToMessages(packets, messages, messageIds, frames);

        assertEquals(frames.size(), 0);
        assertEquals(messages.size(), 1);
        assertEquals(messages.get(0).getType(), Type.CHALLENGE_RESPONSE);
        assertEquals(messageIds.size(), 1);
        assertTrue(messageIds.get(0) == 1);

        ChallengeResponse cr = (ChallengeResponse) messages.get(0);

        assertEquals(cr, ReferenceMessage.generateChallengeResponse());
    }

    /**
     * Check the serialization of the detach request message.
     *
     * @throws IOException on I/O issues
     */
    public void testDetachRequest() throws IOException {
        List<Packet> packets = getReferencePackets(
                                              "messages/detachrequest.dat");

        assertEquals(packets.size(), 1);

        assertEquals(packets.get(0).getSessionId(), 1);
        assertEquals(packets.get(0).getPacketId(), 1);
        assertEquals(packets.get(0).getFirstSendTime(), TIMESTAMP);
        assertEquals(packets.get(0).getGuaranteed(), 1);
        assertEquals(packets.get(0).getResendCount(), 0);

        List<Message>                       messages = new Vector<Message>();
        List<Integer>                       messageIds = new Vector<Integer>();
        Map<Integer, List<MessageFrame>>    frames =
                                    new HashMap<Integer, List<MessageFrame>>();

        Packetizer.packetsToMessages(packets, messages, messageIds, frames);

        assertEquals(frames.size(), 0);
        assertEquals(messages.size(), 1);
        assertEquals(messages.get(0).getType(), Type.DETACH_REQUEST);
        assertEquals(messageIds.size(), 1);
        assertTrue(messageIds.get(0) == 1);

        DetachRequest dr = (DetachRequest) messages.get(0);

        assertEquals(dr, ReferenceMessage.generateDetachRequest());
    }

    /**
     * Check the serialization of the detach response message.
     *
     * @throws IOException on I/O issues
     */
    public void testDetachResponse() throws IOException {
        List<Packet> packets = getReferencePackets(
                                              "messages/detachresponse.dat");

        assertEquals(packets.size(), 1);

        assertEquals(packets.get(0).getSessionId(), 1);
        assertEquals(packets.get(0).getPacketId(), 1);
        assertEquals(packets.get(0).getFirstSendTime(), TIMESTAMP);
        assertEquals(packets.get(0).getGuaranteed(), 0);
        assertEquals(packets.get(0).getResendCount(), 0);

        List<Message>                       messages = new Vector<Message>();
        List<Integer>                       messageIds = new Vector<Integer>();
        Map<Integer, List<MessageFrame>>    frames =
                                    new HashMap<Integer, List<MessageFrame>>();

        Packetizer.packetsToMessages(packets, messages, messageIds, frames);

        assertEquals(frames.size(), 0);
        assertEquals(messages.size(), 1);
        assertEquals(messages.get(0).getType(), Type.DETACH_RESPONSE);
        assertEquals(messageIds.size(), 1);
        assertTrue(messageIds.get(0) == 1);

        DetachResponse dr = (DetachResponse) messages.get(0);

        assertEquals(dr, ReferenceMessage.generateDetachResponse());
    }

    /**
     * Check the serialization of the join request message.
     *
     * @throws IOException on I/O issues
     */
    public void testJoinRequest() throws IOException {
        List<Packet> packets = getReferencePackets(
                                              "messages/joinrequest.dat");

        assertEquals(packets.size(), 1);

        assertEquals(packets.get(0).getSessionId(), 1);
        assertEquals(packets.get(0).getPacketId(), 1);
        assertEquals(packets.get(0).getFirstSendTime(), TIMESTAMP);
        assertEquals(packets.get(0).getGuaranteed(), 1);
        assertEquals(packets.get(0).getResendCount(), 0);

        List<Message>                       messages = new Vector<Message>();
        List<Integer>                       messageIds = new Vector<Integer>();
        Map<Integer, List<MessageFrame>>    frames =
                                    new HashMap<Integer, List<MessageFrame>>();

        Packetizer.packetsToMessages(packets, messages, messageIds, frames);

        assertEquals(frames.size(), 0);
        assertEquals(messages.size(), 1);
        assertEquals(messages.get(0).getType(), Type.JOIN_REQUEST);
        assertEquals(messageIds.size(), 1);
        assertTrue(messageIds.get(0) == 1);

        JoinRequest jr = (JoinRequest) messages.get(0);

        assertEquals(jr, ReferenceMessage.generateJoinRequest());
    }

    /**
     * Check the serialization of the join response message.
     *
     * @throws IOException on I/O issues
     */
    public void testJoinResponse() throws IOException {
        List<Packet> packets = getReferencePackets(
                                              "messages/joinresponse.dat");

        assertEquals(packets.size(), 1);

        assertEquals(packets.get(0).getSessionId(), 1);
        assertEquals(packets.get(0).getPacketId(), 1);
        assertEquals(packets.get(0).getFirstSendTime(), TIMESTAMP);
        assertEquals(packets.get(0).getGuaranteed(), 1);
        assertEquals(packets.get(0).getResendCount(), 0);

        List<Message>                       messages = new Vector<Message>();
        List<Integer>                       messageIds = new Vector<Integer>();
        Map<Integer, List<MessageFrame>>    frames =
                                    new HashMap<Integer, List<MessageFrame>>();

        Packetizer.packetsToMessages(packets, messages, messageIds, frames);

        assertEquals(frames.size(), 0);
        assertEquals(messages.size(), 1);
        assertEquals(messages.get(0).getType(), Type.JOIN_RESPONSE);
        assertEquals(messageIds.size(), 1);
        assertTrue(messageIds.get(0) == 1);

        JoinResponse jr = (JoinResponse) messages.get(0);

        assertEquals(jr, ReferenceMessage.generateJoinResponse());
    }

    /**
     * Check the serialization of the keep alive message.
     *
     * @throws IOException on I/O issues
     */
    public void testKeepalive() throws IOException {
        List<Packet> packets = getReferencePackets(
                                              "messages/keepalive.dat");

        assertEquals(packets.size(), 1);

        assertEquals(packets.get(0).getSessionId(), 1);
        assertEquals(packets.get(0).getPacketId(), 1);
        assertEquals(packets.get(0).getFirstSendTime(), TIMESTAMP);
        assertEquals(packets.get(0).getGuaranteed(), 1);
        assertEquals(packets.get(0).getResendCount(), 0);

        List<Message>                       messages = new Vector<Message>();
        List<Integer>                       messageIds = new Vector<Integer>();
        Map<Integer, List<MessageFrame>>    frames =
                                    new HashMap<Integer, List<MessageFrame>>();

        Packetizer.packetsToMessages(packets, messages, messageIds, frames);

        assertEquals(frames.size(), 0);
        assertEquals(messages.size(), 1);
        assertEquals(messages.get(0).getType(), Type.KEEPALIVE);
        assertEquals(messageIds.size(), 1);
        assertTrue(messageIds.get(0) == 1);

        Keepalive ka = (Keepalive) messages.get(0);

        assertEquals(ka, ReferenceMessage.generateKeepalive());
    }

    /**
     * Check the serialization of the leave request message.
     *
     * @throws IOException on I/O issues
     */
    public void testLeaveRequest() throws IOException {
        List<Packet> packets = getReferencePackets(
                                              "messages/leaverequest.dat");

        assertEquals(packets.size(), 1);

        assertEquals(packets.get(0).getSessionId(), 1);
        assertEquals(packets.get(0).getPacketId(), 1);
        assertEquals(packets.get(0).getFirstSendTime(), TIMESTAMP);
        assertEquals(packets.get(0).getGuaranteed(), 1);
        assertEquals(packets.get(0).getResendCount(), 0);

        List<Message>                       messages = new Vector<Message>();
        List<Integer>                       messageIds = new Vector<Integer>();
        Map<Integer, List<MessageFrame>>    frames =
                                    new HashMap<Integer, List<MessageFrame>>();

        Packetizer.packetsToMessages(packets, messages, messageIds, frames);

        assertEquals(frames.size(), 0);
        assertEquals(messages.size(), 1);
        assertEquals(messages.get(0).getType(), Type.LEAVE_REQUEST);
        assertEquals(messageIds.size(), 1);
        assertTrue(messageIds.get(0) == 1);

        LeaveRequest lr = (LeaveRequest) messages.get(0);

        assertEquals(lr, ReferenceMessage.generateLeaveRequest());
    }

    /**
     * Check the serialization of the leave response message.
     *
     * @throws IOException on I/O issues
     */
    public void testLeaveResponse() throws IOException {
        List<Packet> packets = getReferencePackets(
                                              "messages/leaveresponse.dat");

        assertEquals(packets.size(), 1);

        assertEquals(packets.get(0).getSessionId(), 1);
        assertEquals(packets.get(0).getPacketId(), 1);
        assertEquals(packets.get(0).getFirstSendTime(), TIMESTAMP);
        assertEquals(packets.get(0).getGuaranteed(), 0);
        assertEquals(packets.get(0).getResendCount(), 0);

        List<Message>                       messages = new Vector<Message>();
        List<Integer>                       messageIds = new Vector<Integer>();
        Map<Integer, List<MessageFrame>>    frames =
                                    new HashMap<Integer, List<MessageFrame>>();

        Packetizer.packetsToMessages(packets, messages, messageIds, frames);

        assertEquals(frames.size(), 0);
        assertEquals(messages.size(), 1);
        assertEquals(messages.get(0).getType(), Type.LEAVE_RESPONSE);
        assertEquals(messageIds.size(), 1);
        assertTrue(messageIds.get(0) == 1);

        LeaveResponse lr = (LeaveResponse) messages.get(0);

        assertEquals(lr, ReferenceMessage.generateLeaveResponse());
    }

    /**
     * Check the serialization of the list bubble request message.
     *
     * @throws IOException on I/O issues
     */
    public void testListBubblesRequest() throws IOException {
        List<Packet> packets = getReferencePackets(
                                             "messages/listbubblesrequest.dat");

        assertEquals(packets.size(), 1);

        assertEquals(packets.get(0).getSessionId(), 1);
        assertEquals(packets.get(0).getPacketId(), 1);
        assertEquals(packets.get(0).getFirstSendTime(), TIMESTAMP);
        assertEquals(packets.get(0).getGuaranteed(), 1);
        assertEquals(packets.get(0).getResendCount(), 0);

        List<Message>                       messages = new Vector<Message>();
        List<Integer>                       messageIds = new Vector<Integer>();
        Map<Integer, List<MessageFrame>>    frames =
                                    new HashMap<Integer, List<MessageFrame>>();

        Packetizer.packetsToMessages(packets, messages, messageIds, frames);

        assertEquals(frames.size(), 0);
        assertEquals(messages.size(), 1);
        assertEquals(messages.get(0).getType(), Type.LIST_BUBBLES_REQUEST);
        assertEquals(messageIds.size(), 1);
        assertTrue(messageIds.get(0) == 1);

        ListBubblesRequest lbr = (ListBubblesRequest) messages.get(0);

        assertEquals(lbr, ReferenceMessage.generateListBubblesRequest());
    }

    /**
     * Check the serialization of the list bubbles response message.
     *
     * @throws IOException on I/O issues
     */
    public void testListBubblesResponse() throws IOException {
        List<Packet> packets = getReferencePackets(
                                           "messages/listbubblesresponse.dat");

        assertEquals(packets.size(), 1);

        assertEquals(packets.get(0).getSessionId(), 1);
        assertEquals(packets.get(0).getPacketId(), 1);
        assertEquals(packets.get(0).getFirstSendTime(), TIMESTAMP);
        assertEquals(packets.get(0).getGuaranteed(), 1);
        assertEquals(packets.get(0).getResendCount(), 0);

        List<Message>                       messages = new Vector<Message>();
        List<Integer>                       messageIds = new Vector<Integer>();
        Map<Integer, List<MessageFrame>>    frames =
                                    new HashMap<Integer, List<MessageFrame>>();

        Packetizer.packetsToMessages(packets, messages, messageIds, frames);

        assertEquals(frames.size(), 0);
        assertEquals(messages.size(), 1);
        assertEquals(messages.get(0).getType(), Type.LIST_BUBBLES_RESPONSE);
        assertEquals(messageIds.size(), 1);
        assertTrue(messageIds.get(0) == 1);

        ListBubblesResponse lbr = (ListBubblesResponse) messages.get(0);

        assertEquals(lbr, ReferenceMessage.generateListBubblesResponse());
    }

    /**
     * Check the serialization of the throttle message.
     *
     * @throws IOException on I/O issues
     */
    public void testThrottle() throws IOException {
        List<Packet> packets = getReferencePackets(
                                           "messages/throttle.dat");

        assertEquals(packets.size(), 1);

        assertEquals(packets.get(0).getSessionId(), 1);
        assertEquals(packets.get(0).getPacketId(), 1);
        assertEquals(packets.get(0).getFirstSendTime(), TIMESTAMP);
        assertEquals(packets.get(0).getGuaranteed(), 1);
        assertEquals(packets.get(0).getResendCount(), 0);

        List<Message>                       messages = new Vector<Message>();
        List<Integer>                       messageIds = new Vector<Integer>();
        Map<Integer, List<MessageFrame>>    frames =
                                    new HashMap<Integer, List<MessageFrame>>();

        Packetizer.packetsToMessages(packets, messages, messageIds, frames);

        assertEquals(frames.size(), 0);
        assertEquals(messages.size(), 1);
        assertEquals(messages.get(0).getType(), Type.THROTTLE);
        assertEquals(messageIds.size(), 1);
        assertTrue(messageIds.get(0) == 1);

        Throttle th = (Throttle) messages.get(0);

        assertEquals(th, ReferenceMessage.generateThrottle());
    }

    /**
     * Check the serialization of the eject request message.
     *
     * @throws IOException on I/O issues
     */
    public void testEjectRequest() throws IOException {
        List<Packet> packets = getReferencePackets(
                                             "messages/ejectrequest.dat");

        assertEquals(packets.size(), 1);

        assertEquals(packets.get(0).getSessionId(), 1);
        assertEquals(packets.get(0).getPacketId(), 1);
        assertEquals(packets.get(0).getFirstSendTime(), TIMESTAMP);
        assertEquals(packets.get(0).getGuaranteed(), 1);
        assertEquals(packets.get(0).getResendCount(), 0);

        List<Message>                       messages = new Vector<Message>();
        List<Integer>                       messageIds = new Vector<Integer>();
        Map<Integer, List<MessageFrame>>    frames =
                                    new HashMap<Integer, List<MessageFrame>>();

        Packetizer.packetsToMessages(packets, messages, messageIds, frames);

        assertEquals(frames.size(), 0);
        assertEquals(messages.size(), 1);
        assertEquals(messages.get(0).getType(), Type.EJECT_REQUEST);
        assertEquals(messageIds.size(), 1);
        assertTrue(messageIds.get(0) == 1);

        EjectRequest er = (EjectRequest) messages.get(0);

        assertEquals(er, ReferenceMessage.generateEjectRequest());
    }

    /**
     * Check the serialization of the eject response message.
     *
     * @throws IOException on I/O issues
     */
    public void testEjectResponse() throws IOException {
        List<Packet> packets = getReferencePackets(
                                           "messages/ejectresponse.dat");

        assertEquals(packets.size(), 1);

        assertEquals(packets.get(0).getSessionId(), 1);
        assertEquals(packets.get(0).getPacketId(), 1);
        assertEquals(packets.get(0).getFirstSendTime(), TIMESTAMP);
        assertEquals(packets.get(0).getGuaranteed(), 1);
        assertEquals(packets.get(0).getResendCount(), 0);

        List<Message>                       messages = new Vector<Message>();
        List<Integer>                       messageIds = new Vector<Integer>();
        Map<Integer, List<MessageFrame>>    frames =
                                    new HashMap<Integer, List<MessageFrame>>();

        Packetizer.packetsToMessages(packets, messages, messageIds, frames);

        assertEquals(frames.size(), 0);
        assertEquals(messages.size(), 1);
        assertEquals(messages.get(0).getType(), Type.EJECT_RESPONSE);
        assertEquals(messageIds.size(), 1);
        assertTrue(messageIds.get(0) == 1);

        EjectResponse er = (EjectResponse) messages.get(0);

        assertEquals(er, ReferenceMessage.generateEjectResponse());
    }

    /**
     * Check the serialization of the examine request message.
     *
     * @throws IOException on I/O issues
     */
    public void testExamineRequest() throws IOException {
        List<Packet> packets = getReferencePackets(
                                             "messages/examinerequest.dat");

        assertEquals(packets.size(), 1);

        assertEquals(packets.get(0).getSessionId(), 1);
        assertEquals(packets.get(0).getPacketId(), 1);
        assertEquals(packets.get(0).getFirstSendTime(), TIMESTAMP);
        assertEquals(packets.get(0).getGuaranteed(), 1);
        assertEquals(packets.get(0).getResendCount(), 0);

        List<Message>                       messages = new Vector<Message>();
        List<Integer>                       messageIds = new Vector<Integer>();
        Map<Integer, List<MessageFrame>>    frames =
                                    new HashMap<Integer, List<MessageFrame>>();

        Packetizer.packetsToMessages(packets, messages, messageIds, frames);

        assertEquals(frames.size(), 0);
        assertEquals(messages.size(), 1);
        assertEquals(messages.get(0).getType(), Type.EXAMINE_REQUEST);
        assertEquals(messageIds.size(), 1);
        assertTrue(messageIds.get(0) == 1);

        ExamineRequest er = (ExamineRequest) messages.get(0);

        assertEquals(er, ReferenceMessage.generateExamineRequest());
    }

    /**
     * Check the serialization of the examine response message.
     *
     * @throws IOException on I/O issues
     */
    public void testExamineResponse() throws IOException {
        List<Packet> packets = getReferencePackets(
                                           "messages/examineresponse.dat");

        assertEquals(packets.size(), 1);

        assertEquals(packets.get(0).getSessionId(), 1);
        assertEquals(packets.get(0).getPacketId(), 1);
        assertEquals(packets.get(0).getFirstSendTime(), TIMESTAMP);
        assertEquals(packets.get(0).getGuaranteed(), 1);
        assertEquals(packets.get(0).getResendCount(), 0);

        List<Message>                       messages = new Vector<Message>();
        List<Integer>                       messageIds = new Vector<Integer>();
        Map<Integer, List<MessageFrame>>    frames =
                                    new HashMap<Integer, List<MessageFrame>>();

        Packetizer.packetsToMessages(packets, messages, messageIds, frames);

        assertEquals(frames.size(), 0);
        assertEquals(messages.size(), 1);
        assertEquals(messages.get(0).getType(), Type.EXAMINE_RESPONSE);
        assertEquals(messageIds.size(), 1);
        assertTrue(messageIds.get(0) == 1);

        ExamineResponse er = (ExamineResponse) messages.get(0);

        assertEquals(er, ReferenceMessage.generateExamineResponse());
    }

    /**
     * Check the serialization of the handover request message.
     *
     * @throws IOException on I/O issues
     */
    public void testHandoverRequest() throws IOException {
        List<Packet> packets = getReferencePackets(
                                             "messages/handoverrequest.dat");

        assertEquals(packets.size(), 1);

        assertEquals(packets.get(0).getSessionId(), 1);
        assertEquals(packets.get(0).getPacketId(), 1);
        assertEquals(packets.get(0).getFirstSendTime(), TIMESTAMP);
        assertEquals(packets.get(0).getGuaranteed(), 1);
        assertEquals(packets.get(0).getResendCount(), 0);

        List<Message>                       messages = new Vector<Message>();
        List<Integer>                       messageIds = new Vector<Integer>();
        Map<Integer, List<MessageFrame>>    frames =
                                    new HashMap<Integer, List<MessageFrame>>();

        Packetizer.packetsToMessages(packets, messages, messageIds, frames);

        assertEquals(frames.size(), 0);
        assertEquals(messages.size(), 1);
        assertEquals(messages.get(0).getType(), Type.HANDOVER_REQUEST);
        assertEquals(messageIds.size(), 1);
        assertTrue(messageIds.get(0) == 1);

        HandoverRequest hr = (HandoverRequest) messages.get(0);

        assertEquals(hr, ReferenceMessage.generateHandoverRequest());
    }

    /**
     * Check the serialization of the handover response message.
     *
     * @throws IOException on I/O issues
     */
    public void testHandoverResponse() throws IOException {
        List<Packet> packets = getReferencePackets(
                                           "messages/handoverresponse.dat");

        assertEquals(packets.size(), 1);

        assertEquals(packets.get(0).getSessionId(), 1);
        assertEquals(packets.get(0).getPacketId(), 1);
        assertEquals(packets.get(0).getFirstSendTime(), TIMESTAMP);
        assertEquals(packets.get(0).getGuaranteed(), 1);
        assertEquals(packets.get(0).getResendCount(), 0);

        List<Message>                       messages = new Vector<Message>();
        List<Integer>                       messageIds = new Vector<Integer>();
        Map<Integer, List<MessageFrame>>    frames =
                                    new HashMap<Integer, List<MessageFrame>>();

        Packetizer.packetsToMessages(packets, messages, messageIds, frames);

        assertEquals(frames.size(), 0);
        assertEquals(messages.size(), 1);
        assertEquals(messages.get(0).getType(), Type.HANDOVER_RESPONSE);
        assertEquals(messageIds.size(), 1);
        assertTrue(messageIds.get(0) == 1);

        HandoverResponse hr = (HandoverResponse) messages.get(0);

        assertEquals(hr, ReferenceMessage.generateHandoverResponse());
    }

    /**
     * Check the serialization of the inject request message.
     *
     * @throws IOException on I/O issues
     */
    public void testInjectRequest() throws IOException {
        List<Packet> packets = getReferencePackets(
                                             "messages/injectrequest.dat");

        assertEquals(packets.size(), 1);

        assertEquals(packets.get(0).getSessionId(), 1);
        assertEquals(packets.get(0).getPacketId(), 1);
        assertEquals(packets.get(0).getFirstSendTime(), TIMESTAMP);
        assertEquals(packets.get(0).getGuaranteed(), 1);
        assertEquals(packets.get(0).getResendCount(), 0);

        List<Message>                       messages = new Vector<Message>();
        List<Integer>                       messageIds = new Vector<Integer>();
        Map<Integer, List<MessageFrame>>    frames =
                                    new HashMap<Integer, List<MessageFrame>>();

        Packetizer.packetsToMessages(packets, messages, messageIds, frames);

        assertEquals(frames.size(), 0);
        assertEquals(messages.size(), 1);
        assertEquals(messages.get(0).getType(), Type.INJECT_REQUEST);
        assertEquals(messageIds.size(), 1);
        assertTrue(messageIds.get(0) == 1);

        InjectRequest ir = (InjectRequest) messages.get(0);

        assertEquals(ir, ReferenceMessage.generateInjectRequest());
    }

    /**
     * Check the serialization of the inject response message.
     *
     * @throws IOException on I/O issues
     */
    public void testInjectResponse() throws IOException {
        List<Packet> packets = getReferencePackets(
                                           "messages/injectresponse.dat");

        assertEquals(packets.size(), 1);

        assertEquals(packets.get(0).getSessionId(), 1);
        assertEquals(packets.get(0).getPacketId(), 1);
        assertEquals(packets.get(0).getFirstSendTime(), TIMESTAMP);
        assertEquals(packets.get(0).getGuaranteed(), 1);
        assertEquals(packets.get(0).getResendCount(), 0);

        List<Message>                       messages = new Vector<Message>();
        List<Integer>                       messageIds = new Vector<Integer>();
        Map<Integer, List<MessageFrame>>    frames =
                                    new HashMap<Integer, List<MessageFrame>>();

        Packetizer.packetsToMessages(packets, messages, messageIds, frames);

        assertEquals(frames.size(), 0);
        assertEquals(messages.size(), 1);
        assertEquals(messages.get(0).getType(), Type.INJECT_RESPONSE);
        assertEquals(messageIds.size(), 1);
        assertTrue(messageIds.get(0) == 1);

        InjectResponse ir = (InjectResponse) messages.get(0);

        assertEquals(ir, ReferenceMessage.generateInjectResponse());
    }

    /**
     * Check the serialization of the interact request message.
     *
     * @throws IOException on I/O issues
     */
    public void testInteractRequest() throws IOException {
        List<Packet> packets = getReferencePackets(
                                             "messages/interactrequest.dat");

        assertEquals(packets.size(), 1);

        assertEquals(packets.get(0).getSessionId(), 1);
        assertEquals(packets.get(0).getPacketId(), 1);
        assertEquals(packets.get(0).getFirstSendTime(), TIMESTAMP);
        assertEquals(packets.get(0).getGuaranteed(), 1);
        assertEquals(packets.get(0).getResendCount(), 0);

        List<Message>                       messages = new Vector<Message>();
        List<Integer>                       messageIds = new Vector<Integer>();
        Map<Integer, List<MessageFrame>>    frames =
                                    new HashMap<Integer, List<MessageFrame>>();

        Packetizer.packetsToMessages(packets, messages, messageIds, frames);

        assertEquals(frames.size(), 0);
        assertEquals(messages.size(), 1);
        assertEquals(messages.get(0).getType(), Type.INTERACT_REQUEST);
        assertEquals(messageIds.size(), 1);
        assertTrue(messageIds.get(0) == 1);

        InteractRequest ir = (InteractRequest) messages.get(0);

        assertEquals(ir, ReferenceMessage.generateInteractRequest());
    }

    /**
     * Check the serialization of the inject response message.
     *
     * @throws IOException on I/O issues
     */
    public void testInteractResponse() throws IOException {
        List<Packet> packets = getReferencePackets(
                                           "messages/interactresponse.dat");

        assertEquals(packets.size(), 1);

        assertEquals(packets.get(0).getSessionId(), 1);
        assertEquals(packets.get(0).getPacketId(), 1);
        assertEquals(packets.get(0).getFirstSendTime(), TIMESTAMP);
        assertEquals(packets.get(0).getGuaranteed(), 1);
        assertEquals(packets.get(0).getResendCount(), 0);

        List<Message>                       messages = new Vector<Message>();
        List<Integer>                       messageIds = new Vector<Integer>();
        Map<Integer, List<MessageFrame>>    frames =
                                    new HashMap<Integer, List<MessageFrame>>();

        Packetizer.packetsToMessages(packets, messages, messageIds, frames);

        assertEquals(frames.size(), 0);
        assertEquals(messages.size(), 1);
        assertEquals(messages.get(0).getType(), Type.INTERACT_RESPONSE);
        assertEquals(messageIds.size(), 1);
        assertTrue(messageIds.get(0) == 1);

        InteractResponse ir = (InteractResponse) messages.get(0);

        assertEquals(ir, ReferenceMessage.generateInteractResponse());
    }

    /**
     * Check the serialization of the modify request message.
     *
     * @throws IOException on I/O issues
     */
    public void testModifyRequest() throws IOException {
        List<Packet> packets = getReferencePackets(
                                             "messages/modifyrequest.dat");

        assertEquals(packets.size(), 1);

        assertEquals(packets.get(0).getSessionId(), 1);
        assertEquals(packets.get(0).getPacketId(), 1);
        assertEquals(packets.get(0).getFirstSendTime(), TIMESTAMP);
        assertEquals(packets.get(0).getGuaranteed(), 1);
        assertEquals(packets.get(0).getResendCount(), 0);

        List<Message>                       messages = new Vector<Message>();
        List<Integer>                       messageIds = new Vector<Integer>();
        Map<Integer, List<MessageFrame>>    frames =
                                    new HashMap<Integer, List<MessageFrame>>();

        Packetizer.packetsToMessages(packets, messages, messageIds, frames);

        assertEquals(frames.size(), 0);
        assertEquals(messages.size(), 1);
        assertEquals(messages.get(0).getType(), Type.MODIFY_REQUEST);
        assertEquals(messageIds.size(), 1);
        assertTrue(messageIds.get(0) == 1);

        ModifyRequest mr = (ModifyRequest) messages.get(0);

        assertEquals(mr, ReferenceMessage.generateModifyRequest());
    }

    /**
     * Check the serialization of the modify response message.
     *
     * @throws IOException on I/O issues
     */
    public void testModifyResponse() throws IOException {
        List<Packet> packets = getReferencePackets(
                                           "messages/modifyresponse.dat");

        assertEquals(packets.size(), 1);

        assertEquals(packets.get(0).getSessionId(), 1);
        assertEquals(packets.get(0).getPacketId(), 1);
        assertEquals(packets.get(0).getFirstSendTime(), TIMESTAMP);
        assertEquals(packets.get(0).getGuaranteed(), 1);
        assertEquals(packets.get(0).getResendCount(), 0);

        List<Message>                       messages = new Vector<Message>();
        List<Integer>                       messageIds = new Vector<Integer>();
        Map<Integer, List<MessageFrame>>    frames =
                                    new HashMap<Integer, List<MessageFrame>>();

        Packetizer.packetsToMessages(packets, messages, messageIds, frames);

        assertEquals(frames.size(), 0);
        assertEquals(messages.size(), 1);
        assertEquals(messages.get(0).getType(), Type.MODIFY_RESPONSE);
        assertEquals(messageIds.size(), 1);
        assertTrue(messageIds.get(0) == 1);

        ModifyResponse mr = (ModifyResponse) messages.get(0);

        assertEquals(mr, ReferenceMessage.generateModifyResponse());
    }

    /**
     * Check the serialization of the action even message.
     *
     * @throws IOException on I/O issues
     */
    public void testActionEvent() throws IOException {
        List<Packet> packets = getReferencePackets(
                                           "messages/actionevent.dat");

        assertEquals(packets.size(), 1);

        assertEquals(packets.get(0).getSessionId(), 1);
        assertEquals(packets.get(0).getPacketId(), 1);
        assertEquals(packets.get(0).getFirstSendTime(), TIMESTAMP);
        assertEquals(packets.get(0).getGuaranteed(), 1);
        assertEquals(packets.get(0).getResendCount(), 0);

        List<Message>                       messages = new Vector<Message>();
        List<Integer>                       messageIds = new Vector<Integer>();
        Map<Integer, List<MessageFrame>>    frames =
                                    new HashMap<Integer, List<MessageFrame>>();

        Packetizer.packetsToMessages(packets, messages, messageIds, frames);

        assertEquals(frames.size(), 0);
        assertEquals(messages.size(), 1);
        assertEquals(messages.get(0).getType(), Type.ACTION_EVENT);
        assertEquals(messageIds.size(), 1);
        assertTrue(messageIds.get(0) == 1);

        ActionEvent ae = (ActionEvent) messages.get(0);

        assertEquals(ae, ReferenceMessage.generateActionEvent());
    }

    /**
     * Check the serialization of the disappearance even message.
     *
     * @throws IOException on I/O issues
     */
    public void testDisappearanceEvent() throws IOException {
        List<Packet> packets = getReferencePackets(
                                           "messages/disappearanceevent.dat");

        assertEquals(packets.size(), 1);

        assertEquals(packets.get(0).getSessionId(), 1);
        assertEquals(packets.get(0).getPacketId(), 1);
        assertEquals(packets.get(0).getFirstSendTime(), TIMESTAMP);
        assertEquals(packets.get(0).getGuaranteed(), 1);
        assertEquals(packets.get(0).getResendCount(), 0);

        List<Message>                       messages = new Vector<Message>();
        List<Integer>                       messageIds = new Vector<Integer>();
        Map<Integer, List<MessageFrame>>    frames =
                                    new HashMap<Integer, List<MessageFrame>>();

        Packetizer.packetsToMessages(packets, messages, messageIds, frames);

        assertEquals(frames.size(), 0);
        assertEquals(messages.size(), 1);
        assertEquals(messages.get(0).getType(), Type.DISAPPEARANCE_EVENT);
        assertEquals(messageIds.size(), 1);
        assertTrue(messageIds.get(0) == 1);

        DisappearanceEvent de = (DisappearanceEvent) messages.get(0);

        assertEquals(de, ReferenceMessage.generateDisappearanceEvent());
    }

    /**
     * Check the serialization of the handover even message.
     *
     * @throws IOException on I/O issues
     */
    public void testHandoverEvent() throws IOException {
        List<Packet> packets = getReferencePackets(
                                           "messages/handoverevent.dat");

        assertEquals(packets.size(), 1);

        assertEquals(packets.get(0).getSessionId(), 1);
        assertEquals(packets.get(0).getPacketId(), 1);
        assertEquals(packets.get(0).getFirstSendTime(), TIMESTAMP);
        assertEquals(packets.get(0).getGuaranteed(), 1);
        assertEquals(packets.get(0).getResendCount(), 0);

        List<Message>                       messages = new Vector<Message>();
        List<Integer>                       messageIds = new Vector<Integer>();
        Map<Integer, List<MessageFrame>>    frames =
                                    new HashMap<Integer, List<MessageFrame>>();

        Packetizer.packetsToMessages(packets, messages, messageIds, frames);

        assertEquals(frames.size(), 0);
        assertEquals(messages.size(), 1);
        assertEquals(messages.get(0).getType(), Type.HANDOVER_EVENT);
        assertEquals(messageIds.size(), 1);
        assertTrue(messageIds.get(0) == 1);

        HandoverEvent he = (HandoverEvent) messages.get(0);

        assertEquals(he, ReferenceMessage.generateHandoverEvent());
    }

    /**
     * Check the serialization of the movement even message.
     *
     * @throws IOException on I/O issues
     */
    public void testMovementEvent() throws IOException {
        List<Packet> packets = getReferencePackets(
                                           "messages/movementevent.dat");

        assertEquals(packets.size(), 1);

        assertEquals(packets.get(0).getSessionId(), 1);
        assertEquals(packets.get(0).getPacketId(), 1);
        assertEquals(packets.get(0).getFirstSendTime(), TIMESTAMP);
        assertEquals(packets.get(0).getGuaranteed(), 0);
        assertEquals(packets.get(0).getResendCount(), 0);

        List<Message>                       messages = new Vector<Message>();
        List<Integer>                       messageIds = new Vector<Integer>();
        Map<Integer, List<MessageFrame>>    frames =
                                    new HashMap<Integer, List<MessageFrame>>();

        Packetizer.packetsToMessages(packets, messages, messageIds, frames);

        assertEquals(frames.size(), 0);
        assertEquals(messages.size(), 1);
        assertEquals(messages.get(0).getType(), Type.MOVEMENT_EVENT);
        assertEquals(messageIds.size(), 1);
        assertTrue(messageIds.get(0) == 1);

        MovementEvent me = (MovementEvent) messages.get(0);

        assertEquals(me, ReferenceMessage.generateMovementEvent());
    }

    /**
     * Check the serialization of the perception even message.
     *
     * @throws IOException on I/O issues
     */
    public void testPerceptionEvent() throws IOException {
        List<Packet> packets = getReferencePackets(
                                           "messages/perceptionevent.dat");

        assertEquals(packets.size(), 1);

        assertEquals(packets.get(0).getSessionId(), 1);
        assertEquals(packets.get(0).getPacketId(), 1);
        assertEquals(packets.get(0).getFirstSendTime(), TIMESTAMP);
        assertEquals(packets.get(0).getGuaranteed(), 1);
        assertEquals(packets.get(0).getResendCount(), 0);

        List<Message>                       messages = new Vector<Message>();
        List<Integer>                       messageIds = new Vector<Integer>();
        Map<Integer, List<MessageFrame>>    frames =
                                    new HashMap<Integer, List<MessageFrame>>();

        Packetizer.packetsToMessages(packets, messages, messageIds, frames);

        assertEquals(frames.size(), 0);
        assertEquals(messages.size(), 1);
        assertEquals(messages.get(0).getType(), Type.PERCEPTION_EVENT);
        assertEquals(messageIds.size(), 1);
        assertTrue(messageIds.get(0) == 1);

        PerceptionEvent pe = (PerceptionEvent) messages.get(0);

        assertEquals(pe, ReferenceMessage.generatePerceptionEvent());
    }

    /**
     * Check the serialization of the synchronization begin even message.
     *
     * @throws IOException on I/O issues
     */
    public void testSynchronizationBeginEvent() throws IOException {
        List<Packet> packets = getReferencePackets(
                                     "messages/synchronizationbeginevent.dat");

        assertEquals(packets.size(), 1);

        assertEquals(packets.get(0).getSessionId(), 1);
        assertEquals(packets.get(0).getPacketId(), 1);
        assertEquals(packets.get(0).getFirstSendTime(), TIMESTAMP);
        assertEquals(packets.get(0).getGuaranteed(), 1);
        assertEquals(packets.get(0).getResendCount(), 0);

        List<Message>                       messages = new Vector<Message>();
        List<Integer>                       messageIds = new Vector<Integer>();
        Map<Integer, List<MessageFrame>>    frames =
                                    new HashMap<Integer, List<MessageFrame>>();

        Packetizer.packetsToMessages(packets, messages, messageIds, frames);

        assertEquals(frames.size(), 0);
        assertEquals(messages.size(), 1);
        assertEquals(messages.get(0).getType(),
                     Type.SYNCHRONIZATION_BEGIN_EVENT);
        assertEquals(messageIds.size(), 1);
        assertTrue(messageIds.get(0) == 1);

        SynchronizationBeginEvent sbe =
                                (SynchronizationBeginEvent) messages.get(0);

        assertEquals(sbe,
                ReferenceMessage.generateSynchronizationBeginEvent());
    }

    /**
     * Check the serialization of the synchronization end even message.
     *
     * @throws IOException on I/O issues
     */
    public void testSynchronizationEndEvent() throws IOException {
        List<Packet> packets = getReferencePackets(
                                     "messages/synchronizationendevent.dat");

        assertEquals(packets.size(), 1);

        assertEquals(packets.get(0).getSessionId(), 1);
        assertEquals(packets.get(0).getPacketId(), 1);
        assertEquals(packets.get(0).getFirstSendTime(), TIMESTAMP);
        assertEquals(packets.get(0).getGuaranteed(), 1);
        assertEquals(packets.get(0).getResendCount(), 0);

        List<Message>                       messages = new Vector<Message>();
        List<Integer>                       messageIds = new Vector<Integer>();
        Map<Integer, List<MessageFrame>>    frames =
                                    new HashMap<Integer, List<MessageFrame>>();

        Packetizer.packetsToMessages(packets, messages, messageIds, frames);

        assertEquals(frames.size(), 0);
        assertEquals(messages.size(), 1);
        assertEquals(messages.get(0).getType(),
                     Type.SYNCHRONIZATION_END_EVENT);
        assertEquals(messageIds.size(), 1);
        assertTrue(messageIds.get(0) == 1);

        SynchronizationEndEvent see =
                                (SynchronizationEndEvent) messages.get(0);

        assertEquals(see,
                ReferenceMessage.generateSynchronizationEndEvent());
    }

}
